
<!DOCTYPE HTML><html><head>
<style>
img {width: 80px;height: auto;}
.hover {position: relative;top: 50px;left: 50px;}
.dot {height:15px;width:15px;border-radius:7px;display:inline-block;}
.dot.pointer {cursor: pointer;}
input[type="range"] {width:50px;}
div.a{display: none;}
div.b{}
</style><title>JRMI Accessory MQTT Client Configuration</title>
<meta name="viewport" content="width=device-width, initial-scale=1">
<script>
function getValue(radio) {
alert(radio.value);}

if (!!window.EventSource) {
var source = new EventSource('/events');}

source.addEventListener('Alert', function(e){ 
var strmsg = "Only enter integer values...";
alert("Error updating system name!\n" + strmsg);
}, false);

source.addEventListener('AlertMQTT', function(e){
var strmsg = "Check broker is running and that the IP/port are correct..." ;
alert("Problem connecting to MQTT Broker!\n" + strmsg);
}, false);

function radioClick(elem){
//console.log(elem);
var bid = elem.parentNode.parentNode.id;
var pid = elem.parentNode.id;
var elemid = elem.id;

var params = "bname=" + bid + "&name=" +  pid + "&mode=" + elemid;
//console.log(params);

var xhr = new XMLHttpRequest();
xhr.open("POST", "/changeradio", true);
xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
xhr.send(params);}

function onpwmclick(elem){
//console.log(elem);
var bid = elem.parentNode.parentNode.id;
var pid = elem.parentNode.id;
var newstate = elem.checked;

var params = "bname=" + bid + "&name=" +  pid + "&state=" + newstate;
//console.log(params);

var xhr = new XMLHttpRequest();
xhr.open("POST", "/changechkb", true);
xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
xhr.send(params);}

function slider(elem){
var bid = elem.parentNode.parentNode.parentNode.id;
var pid = elem.parentNode.parentNode.id;
var elemid = elem.id;
var params = "board=" + bid + "&pin=" + pid + "&value=" + elem.value ;
//console.log(params);
var xhr = new XMLHttpRequest();              
xhr.open("POST", "/rangeChange", true);
xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
xhr.send(params);}

function dot_click(element) {
var parentid = element.parentNode.parentNode.id;
var thisid = element.parentNode.id;
//console.log(parentid + "pin" + thisid);
var sysname = document.getElementById(parentid + "pin" + thisid).value

//var sysname = element.parentNode.children[1].value;
var state = element.dataset.state;
//we flip the state here
if (state == 'T'){
  state = 'C';
} else if (state == 'C'){
  state = 'T';
} else if (state == 'A'){
  state = 'I';
} else if (state == 'I'){
  state = 'A';
} else if (state == 'N'){
  state = 'F';
} else if (state == 'F'){
  state = 'N';
}
var params = "sysname=" + sysname + "&state=" + state;
//console.log(params);
var xhr = new XMLHttpRequest();              
xhr.open("POST", "/dot_button_click", true);
xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
xhr.send(params);}

source.addEventListener('dotEnable', function(e){ 
//console.log('dotEnable', e.data);
const mySplit = e.data.split(":");
if (mySplit[1] == 'on') {
    //console.log('on');
    document.getElementById(mySplit[0]).className = 'dot pointer';
    document.getElementById(mySplit[0]).setAttribute ( 'onclick', 'dot_click(this);');
} else {
    //console.log('off');
    document.getElementById(mySplit[0]).className = 'dot';
    document.getElementById(mySplit[0]).setAttribute ( 'onclick', ' ');
}}, false);

source.addEventListener('moveSlider', function(e){ 
//console.log('MoveSlider', e.data);
const sinfo = e.data.split(":");
document.getElementById(sinfo[0]).value = sinfo[1];
}, false);

source.addEventListener('sliderEnable', function(e){ 
//console.log('SliderEnable', e.data);
const sinfo = e.data.split(":");
document.getElementById(sinfo[0]).value = sinfo[2];
if ( sinfo[1] == 'off' ){
  document.getElementById(sinfo[0]).disabled = true;
} else {
  document.getElementById(sinfo[0]).disabled = false;
}}, false);

source.addEventListener('setDot', function(e){ 
//console.log('SetDot', e.data);
const Supdate = e.data.split(":");
document.getElementById(Supdate[0]).setAttribute('data-state',Supdate[1]);
if ( Supdate[1] == 'I' || Supdate[1] == 'C' || Supdate[1] == 'F' ){
  document.getElementById(Supdate[0]).style.backgroundColor = "red";
} else {
  document.getElementById(Supdate[0]).style.backgroundColor = "green";
}}, false);

</script></head><body>
<a href="https://www.jmri.org/"> 
<img src="https://www.jmri.org/images/logo-jmri.gif" alt="JMRI"></a>
<h1>JRMI Accessory MQTT Client Configuration.</h1>
<p>Client IP Address: 192.168.1.157</p>
<p>Client MAC Address: E8:DB:84:E1:1D:2F</p>

<form action="/get">
MQTT Broker IP:    <input type="text" id="mqttip" name="MQTTHostIp" value="192.168.1.45">
MQTT Broker Port:  <input type="text" id="mqttport" name="MQTTHostPort" value="1883"><br><br>
MQTT Topic:  <input type="text" id="mqtttopic" name="MQTTTopic" value="/trains/track/#">&nbsp;&nbsp;default: /trains/track/#<br>
<p>Enter JMRI MQTT system names (excluding leading "MS/MT") and set to Sensor or Turnout. "0" means unused.</p>
<p>Turnout state can be changed by clicking the green/red circle.<p>
<div id='0' class='b' >
<div id='0'>
 Pin 0 <span style='background-color:red;'  id='0dot0' class='dot pointer' data-state='C' onclick='dot_click(this)' ></span>
 <input type='text' id='0pin0' name='0pin0' value='5' >
<input type='radio' id='S' name='0mod0' value='S' onchange='radioClick(this)' disabled >
<label for='sensor'>Sensor</label>
<input type='radio' id='T' name='0mod0' value='T' onchange='radioClick(this)' checked  >
<label for='turnout'>Turnout</label>
<input type='checkbox' id='0chk0' name='0chk0' onchange='onpwmclick(this)' checked > <label for='pwmcheck'>PWM</label>
<input type='radio' id='L' name='0mod0' value='L' onchange='radioClick(this)'    >
<label for='light'>Light</label>
<span class='slider'><input disabled id='0sli0' type='range' min='0' max='255' value='0' onchange='slider(this)' oninput='slider(this)'><span></div>
<div id='1'>
 Pin 1 <span style='background-color:red;'  id='0dot1' class='dot' data-state='C'   ></span>
 <input type='text' id='0pin1' name='0pin1' value='0' >
<input type='radio' id='S' name='0mod1' value='S' onchange='radioClick(this)'   >
<label for='sensor'>Sensor</label>
<input type='radio' id='T' name='0mod1' value='T' onchange='radioClick(this)' checked  >
<label for='turnout'>Turnout</label>
<input type='checkbox' id='0chk1' name='0chk1' onchange='onpwmclick(this)' checked > <label for='pwmcheck'>PWM</label>
<input type='radio' id='L' name='0mod1' value='L' onchange='radioClick(this)'    >
<label for='light'>Light</label>
<span class='slider'><input disabled id='0sli1' type='range' min='0' max='255' value='0' onchange='slider(this)' oninput='slider(this)'><span></div>
<div id='2'>
 Pin 2 <span style='background-color:red;'  id='0dot2' class='dot' data-state='C'   ></span>
 <input type='text' id='0pin2' name='0pin2' value='0' >
<input type='radio' id='S' name='0mod2' value='S' onchange='radioClick(this)'   >
<label for='sensor'>Sensor</label>
<input type='radio' id='T' name='0mod2' value='T' onchange='radioClick(this)' checked  >
<label for='turnout'>Turnout</label>
<input type='checkbox' id='0chk2' name='0chk2' onchange='onpwmclick(this)' checked > <label for='pwmcheck'>PWM</label>
<input type='radio' id='L' name='0mod2' value='L' onchange='radioClick(this)'    >
<label for='light'>Light</label>
<span class='slider'><input disabled id='0sli2' type='range' min='0' max='255' value='0' onchange='slider(this)' oninput='slider(this)'><span></div>
<div id='3'>
 Pin 3 <span style='background-color:red;'  id='0dot3' class='dot' data-state='C'   ></span>
 <input type='text' id='0pin3' name='0pin3' value='0' >
<input type='radio' id='S' name='0mod3' value='S' onchange='radioClick(this)' disabled >
<label for='sensor'>Sensor</label>
<input type='radio' id='T' name='0mod3' value='T' onchange='radioClick(this)' checked  >
<label for='turnout'>Turnout</label>
<input type='checkbox' id='0chk3' name='0chk3' onchange='onpwmclick(this)' checked > <label for='pwmcheck'>PWM</label>
<input type='radio' id='L' name='0mod3' value='L' onchange='radioClick(this)'    >
<label for='light'>Light</label>
<span class='slider'><input disabled id='0sli3' type='range' min='0' max='255' value='0' onchange='slider(this)' oninput='slider(this)'><span></div>
<div id='4'>
 Pin 4 <span style='background-color:red;'  id='0dot4' class='dot' data-state='C'   ></span>
 <input type='text' id='0pin4' name='0pin4' value='0' ÿÿ
